package main

import (
	"bufio"
	"bytes"
	"crypto"
	"crypto/rand"
	"fmt"
	"io"
	"log"
	"net"
	"os"
	"os/signal"
    "sync/atomic"
    "github.com/golang/sync/syncmap"
	// "time"

	"github.com/golang/protobuf/proto"
	"./go-ecdh"
	"./message"
    "./prng"
)

var port = "0.0.0.0:9001"
var pubKey crypto.PublicKey
var privKey crypto.PrivateKey
var curve ecdh.ECDH
var sharedKeys *syncmap.Map                         //[string][]byte
var pendingSentMessages *syncmap.Map // [string]string       // Map nonce to messages I sent but havent heard back yet
var pendingReceivedMessages *syncmap.Map  // [string][]byte   // Map nonce to incomplete received messages
var count *syncmap.Map  // [string]int                        // number of received messages with a given nonce
var numConns uint32
var conn net.Conn

// receive handles the receiving of messages.
// it puts the received data into a protobuf and passes it to a parsing function.
func receive(){
	for {
		data := make([]byte, 4096)
		n, err := conn.Read(data)
		switch err {
		case nil:
		case io.EOF:
			os.Exit(0)
		default:
			fmt.Println("ERROR", err)
			os.Exit(2)
		}

		protoData := new(message.Message)
		err = proto.Unmarshal(data[0:n], protoData)
		if err != nil{
			log.Fatal("error unmarshalling: ", err)
		}
		// fmt.Printf("\n[Receive] - [% x]\n", protoData.Data[:2])

		// now we need to parse received message
		go parseMessage(protoData)
	}
}

// prepMessage will compute the XOR of a given message with bytes
// generated by each of the Pseudo random number generators to create the
// final message that can be broadcast to other clients. 
// 
// if preparing a message send []byte(message)
// If preping a response to a message send []byte{0,0,...0}
func prepMessage(msg []byte, nonce []byte) ([]byte, error) {
    result := []byte(msg)
    sharedKeys.Range(func(pk, v interface{}) bool {
        // get the random bytes for each connection 
        hold, err := prng.GetBytes(v.([]byte), len(msg), nonce)

        if err != nil {
            return false
        }

        // Print the first two bytes of the key and the first 3 of random for debugging
        fmt.Printf("[prepMessage] [% x] => [% x]\n", []byte(pk.(string))[:2], hold[:3])

        // Take the XOR of the random bytes with the message
        for i :=0; i < len(msg); i++{
            result[i] = result[i] ^ hold[i]
        }

        return true
    })

    return result, nil
}

// parseMessage will take a message and connection and will determine how to
// handle a message based on the type of the message. Some messages require 
// immediate responses, and those are given.
func parseMessage(msg *message.Message){
	if *msg.Type == 0{
		//received a key
		fmt.Printf("[parseMessage] received key, [% x]\n", msg.Data[:2])
		newKey := parseKey(msg.Data)

		if newKey{
			// now your key has to be sent in response
			m := &message.Message{
				Data: curve.Marshal(pubKey),
				Type: proto.Int32(0),
			}
			send(m)
		}
	}else if *msg.Type == 1{
		//received a new message
		fmt.Printf("[parseMessage] Type 1: Received: [% x]\n", msg.Data)
		handleMessage(msg)

	}else if *msg.Type ==2{
        // Received Old format message
		fmt.Printf("[parseMessage] Type 2: Received: [% x]\n", msg.Data)
		handleMessage(msg)

    }else if *msg.Type == 3{
        //received a new Error From the server
		fmt.Printf("[parseMessage] Type 3 Received Nonce Error: %s\n", msg.Data)

	}else if *msg.Type == 4{
		// received a disconnect message
		fmt.Println("[parseMessage] deleting stuff")
		sharedKeys.Delete(string(msg.Data))

        // decrement number of connections (see sync/atomic.AddUint32 docs)
        atomic.AddUint32(&numConns, ^uint32(0))
	}
}

// handleMessage will run when a new message (type 1) is received and will
// send out replies, does not handle other replies.
func handleMessage(msg *message.Message){

    if pendingReceivedMessages == nil{
        pendingReceivedMessages = new(syncmap.Map) //, string, []byte
    }

    if pendingSentMessages == nil{
        pendingSentMessages = new(syncmap.Map) //, string, []byte
    }

    if count == nil{
        count = new(syncmap.Map)  // string. int
    }

    _, psm := pendingSentMessages.Load(string(msg.Nonce))
    known, prm := pendingReceivedMessages.Load(string(msg.Nonce))

    if  psm {
        // Message sent by me
        // really doesn't need to do anything at all except display the message, it knows what it sent.
        numReceived, _ := count.Load(string(msg.Nonce))
		count.Store(string(msg.Nonce), numReceived.(uint32)+1 )
        fmt.Printf("[handleMessage] I sent this message - %d\n", numReceived.(uint32)+1 )
    } else if !prm {
        // We have never seen this nonce - send our response and store
        fmt.Printf("[handleMessage] I have NOT seen this and didn't send it - 1/%d\n", numConns)
        err := sendResponse(len(msg.Data), msg.Nonce)

        // Store the received message to be looked up by its nonce
        pendingReceivedMessages.Store(string(msg.Nonce), msg.Data)
        count.Store(string(msg.Nonce), uint32(1))

        numReceived, _ := count.Load(string(msg.Nonce))
        if numReceived.(uint32) == numConns-1 {
            message, _ := pendingReceivedMessages.Load(string(msg.Nonce))
            fmt.Printf("[handleMessage] FINAL  === %s", message )
        }


        if err != nil {
            fmt.Println(err)
        }
    } else {
        // We have seen this nonce but haven't received all parts yet 
        numReceived, _ :=  count.Load(string(msg.Nonce))
        count.Store(string(msg.Nonce), numReceived.(uint32)+1)
        knownXOR := make([]byte, len(msg.Data))

        // Take the XOR of the messae with the known bytes
        for i := 0; i < len(msg.Data); i++ {
            knownXOR[i] = known.([]byte)[i] ^ msg.Data[i]
        }

        // Store the bytes
        if numReceived.(uint32) == numConns-1 {
            message, _ := pendingReceivedMessages.Load(string(msg.Nonce))
            fmt.Printf("[handleMessage] FINAL MESSAGE === %s\n\n\n", message)
        } else {
            fmt.Printf("[handleMessage] I have seen this but didn't send it - %d/%d\n", numReceived.(uint32)+1, numConns)
            pendingReceivedMessages.Store(string(msg.Nonce), knownXOR)
        }
    }
}


// parseKey will parse given data to see if it is a key we already have, if not
// it will add it to our global map, and generate a shared secret. 
// Returns whether the key is new.
func parseKey(data []byte) bool{
	//received a key,  check if it is ours, if it is not, check if we already
	// have the shared key.
	if bytes.Equal(data, curve.Marshal(pubKey)){
		//this is our key
		fmt.Println("[parseKey] this is my Key")
		return false
	}

	// not our key, generate a secret, see if we already have it.
	otherKey, fail := curve.Unmarshal(data)
	if fail != true {
		fmt.Println("Sent key couldn't unmarshal")
		return false
	}

	// don't have any keys
	if sharedKeys == nil{
		sharedKeys = new(syncmap.Map ) // string, []byte
	}

	_, ok := sharedKeys.Load(string(data))
	if ok{
		// already have this key
		fmt.Println("[parseKey] i have this key")
		return false
	}
	fmt.Println("[parseKey] i don't have this key")


    // don't have this key
	newSharedKey, err := curve.GenerateSharedSecret(privKey, otherKey)
	if err != nil {
		fmt.Println("couldn't generate shared secret, err=",err)
		return false
	}

    sharedKeys.Store(string(data), newSharedKey)

    atomic.AddUint32(&numConns, 1)
	// fmt.Println("added new key!")
	return true;
}

// genKeys generates keys based on curve ed25519, fills in global values.
func genKeys() {
	curve = ecdh.NewCurve25519ECDH() 
	privKey, pubKey, _  = curve.GenerateKey(rand.Reader)
}

// sendMessage deals with the sendig of actual messages that the client
// wants to distribute. 
func sendMessage( msg string) error {
    nonce := make([]byte, 16)
    _, err := rand.Read(nonce)

    // Note that err == nil only if we read len(b) bytes.
    if err != nil {
        return err
    }

    // Prepare the message by XORing with known connections
    preppedMsg, err := prepMessage([]byte(msg), nonce)
    if err != nil {
        return err
    }

    m := &message.Message{
        Data: preppedMsg,
        Type: proto.Int32(1),
        Nonce: nonce,
    }

    // add to the pending messages dictionary
    if pendingSentMessages == nil {
        pendingSentMessages = new(syncmap.Map)   // string, string
    }

	if count == nil {
		count = new(syncmap.Map) //  string, int
	}

    // Send the message out to the other clients
    pendingSentMessages.Store(string(nonce), msg)
	count.Store(string(nonce), uint32(1))
    send(m)

    return nil
}

// respondMessage deals with the received messages that a client did NOT 
// personally send out. This means sending the XOR of all known connections
func sendResponse( length int, nonce []byte) error{
    bytes := make([]byte, length)

    for i :=0; i < length; i++ {
        bytes[i] = 0
    }

    preppedRsp, err := prepMessage(bytes, nonce)
    if err != nil {
        return err
    }

    m := &message.Message{
        Data: preppedRsp,
        Type: proto.Int32(1),
        Nonce: nonce,
    }


    // Send the Response out to the other clients
    send(m)

    return nil
}

// send handles the sending of messages packets to the server, it will Marshal
// the protobuf and then write it to the server.
func send(m *message.Message){
	data, err := proto.Marshal(m)
	if err != nil {
		log.Fatal("marshaling error: ", err)
	}

	_, err = conn.Write(data)
	if err != nil{
		log.Fatal("sending error: ", err)
	}
	fmt.Printf("\n[send] sent [% x]\n", m.Data[:2])
	// fmt.Printf("Sent %d bytes\n", n)
}

// cleanup sends a message to the server telling it the client is disconnecting
func cleanup(){
	m:= &message.Message{
		Data: curve.Marshal(pubKey),
		Type: proto.Int32(4),
	}
	send(m)
}

// getInput handles the collection of input from user, once they have typed
// a message it is passed back to make routine via channel.
func getInput(inpChan chan []byte){
	for {
		fmt.Print("Message: ")
		userInput := bufio.NewReader(os.Stdin)
		userLine, err := userInput.ReadBytes(byte('\n'))
		switch err {
		case nil:
			inpChan <- userLine
		case io.EOF:
            cleanup()
			os.Exit(0)
		default:
			fmt.Println("ERROR", err)
            cleanup()
			os.Exit(1)
		}
	}
}

// main client method, establishes connection to server, allows user to type
// messages to be sent.
func main() {
	// set up the connection
	var err error

    numConns = 1

    tcpAddr, err := net.ResolveTCPAddr("tcp", port)
    if err != nil {
        println("ResolveTCPAddr failed:", err.Error())
        os.Exit(1)
    }

    conn, err = net.DialTCP("tcp", nil, tcpAddr)
    if err != nil {
        println("Dial failed:", err.Error())
        os.Exit(1)
	}

	// start receiving messages
	go receive()

	// we have two types of input, a typed message and also a ctrl+c signal
	// we create a channel for the signal first, if a user types ctrl+c it will
	// cause the anonymous function to call cleanup() and inform the main loop 
	// that it should exit
	sigChan := make(chan os.Signal, 1)
	sigHandled := make(chan bool)
	signal.Notify(sigChan, os.Interrupt)
	go func(){
		<- sigChan
		cleanup()
		sigHandled <- true
	}()

	// set up our keys
	genKeys()

	// send our keys to the server to broadcast to all users
	m := &message.Message{
		Data: curve.Marshal(pubKey),
		Type: proto.Int32(0),
	}
	send(m)

	// we now make a channel for our user input, since we have to listen for
	// two types of input we need two channels each running concurrently.
	// once the input has been gathered it will fill channel with input or 
	// handle error.
	inpChan := make(chan []byte)
	go getInput(inpChan)

	// main loop, waits for channels to be filled, if input is filled it will 
	// send the message, if the signal channel is filled it will handle cleanup
	// and then exit
	for {
		select{
		case inp :=<-inpChan:
            sendMessage(string(inp))
		case <- sigHandled:
			cleanup()
			os.Exit(0)
		}
	}
}
